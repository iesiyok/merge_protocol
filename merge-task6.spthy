theory merge_task6
begin


builtins: hashing, signing, multiset, diffie-hellman
functions: h/1
restriction Equality:	"All x y #i. Eq(x, y) @i ==> x = y"
restriction	Inequality: "All x #i. Neq(x,x) @ #i ==> F"
// functions: hash/1
// equations: hash(<hd, tl>)= h(<hd, hash(tl)>) 
// equations: hash(<r, '0'>)=h(<r, 'nil'>)

//public key register
rule Reg:
  [Fr(~k)] --[ Reveal_p($A)]-> [ !Pub_k($A, pk(~k)), !Priv_k($A, ~k), Out( pk(~k))]  

rule initialize:
	let x = <m1, m2, '0'>
	in
	[]--[Init()]->[Prot_loop(x, 'nil')]

rule start:
	let m = <hd, ph>
	    e = h(m)
	 in
	[Prot_loop(<hd, tl>, ph)]--[Neq(hd, '0'), Protocol_Start()]->[Prot_loop(tl, e)]

rule U_1_loop_start:
 let prev_h = 'nil'
 in
 	[Prot_loop(t, org_x)] --[Start($U, $W)]-> [ !U_1_Loop(org_x, prev_h), !State($U, $W, org_x), X_org(org_x)]

rule U_1_loop:
 let m = <hd, ph>
     e = h(m)		  
     sig = sign(e, ~k )
 in
 [	 !Priv_k(U, ~k) 
 , 	 !U_1_Loop(<hd, tl>, ph)
 ,	 !State(U, W)
 ]
 --[ Neq(hd, '0'),
 	 U_1_St(U, e)
 ]->[
 	 Out( <e, sig>)	
 ,   U_1_Send(U, W, hd, e)	 //instead of a one global state I found this pieced states to be more informative..
 ,	 !U_1_Loop(tl, e)
 ]	

rule W:
 let e = h(<r, ph>)
 	 v = verify(sig, e, pkU)
     sig2 = sign(e, kW)	
 in 									
 [	 !State(U, W), Pub_k(U, pkU), !Priv_k(W, kW)
 ,   In(<e, sig>)	
 ]
 --[ Eq(v,true), W_Rcv(W, e)		
 ]->
 [   Out(<e, sig2>)
 ]

 //U-2 user receive
rule U_2:
 let e = h(<r, ph>)
 	 v = verify(sig, e, pkW)
 in
 [
 	 !Pub_k(W, pkW), !State(U, W), U_1_Send(U, W, r, e)				
 ,   In(<e, sig>)
 ]
 --[ Eq(v, true)
 ,	 Accept(U, W, e)		//ACCEPT under these circumstances
 ]->
 [	Accepted(U, W, e) ]	


rule retrieved_all:
	// let e = hash(<r, hash(x)>)
	// in
[
	 Accepted(U, W, e), !State(U, W), X_org(e) 
]--[ All_Retrieved(U, W, e) //ALL messages retrieved
]->[]

lemma no_loop_start_wihout_protocol_start [use_induction]:
  "(All U W #i. Start(U, W)@i ==> Ex #j. Init()@j & j<i)
  ==>
   (All #k. Protocol_Start()@k ==> j<k & k<i)"


lemma start_protocol [reuse, use_induction]:
	"All U W #i. Start(U, W)@i ==> (Ex #j. Protocol_Start()@j & j < i)"  

lemma no_delivery_without_W [use_induction]:
  "(All U W e #i. Accept(U, W, e) @ i ==> Ex #j. U_1_St(U, e) @ j )
  ==>
   (All #k. W_Rcv(W, e)@k ==> j<k & k<i)"


// lemma init_protocol :
// 	"All #i. Protocol_Start()@i ==> (Ex #j. Init()@j & j < i)"


lemma start_before_U_send [reuse, use_induction]:
	"All U e #i. U_1_St(U, e)@i ==> (Ex W #j. Start(U, W)@j & j < i)"

lemma U_send_before_W_rcv [reuse, use_induction]:
	"All W e #i. W_Rcv(W, e)@i ==> (Ex U #j. U_1_St(U, e)@j & j < i)"	

lemma W_rcv_before_accept [reuse, use_induction]:
	"All U W e #i. Accept(U, W, e)@i ==> (Ex #j. W_Rcv(W, e)@j & j < i)"

lemma start_before_accept [reuse, use_induction]:
	"All U W e #i. All_Retrieved(U, W, e)@i ==> (Ex #j. Start(U, W)@j & j < i)"

lemma all_retrieved [use_induction]:
	"All U W e #i. All_Retrieved(U, W, e)@i ==> (Ex #j. Accept(U, W, e)@j & j<i )"	


end