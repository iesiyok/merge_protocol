/*
**  Authors: iesiyok, rkunnema
**  Merge protocol task-6 has been explored without asymmetric encrytion
**  and the user doesn't know where he sends his message
*/

theory merge_task6
begin


builtins: hashing, signing
functions: h/1
restriction Equality:	"All x y #i. Eq(x, y) @i ==> x = y"
restriction	Inequality: "All x #i. Neq(x,x) @ #i ==> F"



//public key register
rule Reg:
  [Fr(~k)] --[ Reveal_p($A)]-> [ !Pub_k($A, pk(~k)), !Priv_k($A, ~k), Out( pk(~k))]  

// Compromising an agent's private key
rule Reveal_ltk:
	[ !Priv_k(A, ~k) ] --[ Reveal_k(A) ]-> [ Out(~k) ]

/*
**  Initialization of sender U
*/
rule U_1_loop_start:
 let h_fst_msg ='nil' //hash of first message is 'nil'
 in
 [] --[U_1_Initial(x) //original x, chain of messages , i.e. h(m2, h(m1, 'nil'))
 ]-> [ U_1_Loop(U, x, h_fst_msg) ]

/*
**  Sender U loops through the message to to send the message piece by piece
**  { U =(User id), hd=(message, the first item on the list), 
**    tl=(the rest of messages on the list), ph= previous hash }
*/
rule U_1_loop:
 let m = <hd, ph>   // the structure of messages :-> <message, previous_hash>
     e = h(m)		  
     sig = sign(e, k )  //sign with U's private key
 in
 [	 !Priv_k(U, k) 
 , 	 U_1_Loop(U,  <hd, tl>, ph)
 ]
 --[ U_1_St(U,  hd, e), Unique(U)
 ]->[
 	   Out( <e, sig>)	
 ,   U_1_Send(U,  hd, tl, ph)	 
 ,	 U_1_Loop(U,  tl, e)
 ]	


/*
**  W web server receiver. W doesn't need to loop.
*/
rule W:
 let e = h(<r, ph>)
 	   v = verify(sig, e, pkU)
     sig2 = sign(e, kW)
 in 									
 [
     !Pub_k(U, pkU) //U-> the sender
 ,   !Priv_k(W, kW) //W-> the receiver
 ,   In(< e, sig>)
 ]
 --[ W_Rcv(W, r, e), Eq(v, true)			
 ,   Neq(U, W)			
 ]->
 [   //the same message signed with W's private key and hashed before sending
     Out(h(< e, sig2>)) 
 ]


 //U-2 user receive
rule U_2:
 let e = h(<r, ph>)
 	   v = verify(sig, e, pkW)
 in
 [
 	  !Pub_k(W, pkW)  								
 ,   U_1_Send( U,  r, tl, ph)	//the status from previous step(U-1)
 ,   In(h(< e, sig>))
 ]
 --[ Eq(v, true)
 ,	 Accept(U, W,  r, e)		//ACCEPT under these circumstances
 ]->
 [	 Accepted(U, W,  e, tl)
 ]	

  //U-2 user receive
rule retrieve_all:
 [
 	   Accepted(U, W,  e, '0')  //All messages retrieved if the last message is '0'
 ]
 --[ All_Retrieved(U, W,  e)
 ]->
 [	 ]	


 
/*	RESTRICTIONS	*/

//U is unique
restriction U_unique:
  "All U #i #j. Unique(U)@j & Unique(U)@i ==> #i = #j"


/*	LEMMAS	*/


//Sanity check ~ yields an attack
lemma sanity :
   exists-trace
   "Ex U W e #i . All_Retrieved( U, W, e)@i " 

//The User must be initialized to start looping
lemma user_snd_preceded_by_init [use_induction]:
  "(All U m e #i. U_1_St(U, m, e)@i ==> Ex x #j. U_1_Initial(x)@j & j<i) "     

//All messages have been retrieved -> can be understood when the last message has been accepted
lemma all_retrieved_preceded_by_accept [reuse, use_induction]:
	"(All U W e #i. All_Retrieved(U, W, e)@i ==> Ex m #j. Accept(U, W, m, e)@j & j<i)"	

//Doesn't hold, It yields an attack as the original x is not fresh. Added for testing!
lemma accept_preceded_by_w_rcv2:
  " ( All U W m e #i. Accept(U, W, m, e)@i
       ==> (Ex #j. W_Rcv(W, m, e)@j  ) //legitimate way
    )
  "  

/*
**  Accept must be followed by W_Rcv, however as the original 'x' hasn't been chosen fresh,
**  an attacker can compound a new message from other agents' messages and send it to the user
*/
lemma accept_preceded_by_w_rcv [reuse, use_induction]:
  " ( All U W m e #i. Accept(U, W, m, e)@i
       ==> (Ex #j. W_Rcv(W, m, e)@j  ) //legitimate way
       | (Ex #k. KU(m)@k ) | (Ex #l. KU(e)@l ) //attack scenario
    )
  "  
/*
**  W_Rcv must be followed by U_1_St, however as the original 'x' hasn't been chosen fresh,
**  an attacker can compound a new message from other agents' messages and send it to the Webserver
*/
lemma w_rcv_preceded_by_user_snd [reuse, use_induction]:
  " ( All W m e #i. W_Rcv(W, m, e)@i 
      ==> (Ex U #j. U_1_St(U, m, e)@j & j<i) //legitimate way
        | (Ex #k. KU(m)@k ) | (Ex #l. KU(e)@l )//attack scenario
  )
 "
/*
**  These two lemmas are currently undecidable, as they can't conclude to a contradiction, 
**  Still working on to define a simpler lemma to verify this property
** 
**  W_Rcv must be followed by U_1_St, however if an attack occurs,
**  The adversary must have acquired this message from another user 
*/
lemma no_other_method_to_change_w_rcv [ use_induction]:
  "not (Ex U W m e #i #j #k #n. W_Rcv(W, m, e)@i 
        & U_1_St(U, m, e)@j & j<i
        & KU(e)@k & KU(m)@n
        & not ((Ex A #l. U_1_St(A, m, e)@l & (not Eq(U, A)@l) ) 
                  | (Ex A #l. W_Rcv(A, m, e)@l & (not Eq(W, A)@l) ) )
      )"

//similar to the case above
/*
lemma no_other_method_to_change_u_send [ use_induction]:
	"not (Ex U W m e #i #j #k #l #o. Accept(U, W, m, e)@i & W_Rcv(W, m, e)@j & j<i 
			  & U_1_St(U, m, e)@k & k<j
				& KU(e)@l & KU(m)@o 
				& not (Ex A #n. U_1_St(A, m, e)@n & (not Eq(U, A)@n) )
        )"
*/
//a simple scenario
lemma process [use_induction] :
	" All U W #i #j . All_Retrieved(U, W, h(<m2, h(<m1, 'nil'>)>))@i & Accept(U, W, m2, h(<m2, h(<m1, 'nil'>)>))@i & Accept(U, W, m1, h(<m1, 'nil'>))@j
						==> Ex #k #l #m #n #o. U_1_St(U, m1, h(<m1, 'nil'>))@k & W_Rcv(W, m1, h(<m1, 'nil'>))@l
						& U_1_St(U, m2, h(<m2, h(<m1, 'nil'>)>))@m & W_Rcv(W, m2, h(<m2, h(<m1, 'nil'>)>))@n
											 & U_1_Initial(<m1, m2, '0'>)@o & j<i & l<j & n<i & k<l & l<m & m<n & j<m "


lemma sanity_check2:
  "All U W #i. All_Retrieved(U, W, e)@i 
                ==> Ex m #j. U_1_St(U, m, e)@j & j<i"


end