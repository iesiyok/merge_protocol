theory append_test11
begin


builtins: hashing, signing
functions: h/1
restriction Equality:	"All x y #i. Eq(x, y) @i ==> x = y"
restriction	Inequality: "All x #i. Neq(x,x) @ #i ==> F"
functions: hash/1
equations: hash(<hd, tl>)= h(<hd, h(tl)>), hash(<hd, '0'>)=h(<hd, 'nil'>)


//public key register
rule Reg:
  [Fr(~k)] --[ Reveal_p($A)]-> [ !Pub_k($A, pk(~k)), !Priv_k($A, ~k), Out( pk(~k))]  

//TODO; REMEMBER REVEAL KEY!!!!

// Compromising an agent's private key
// rule Reveal_ltk:
// 	[ !Priv_k(A, ~k) ] --[ Reveal_k(A) ]-> [ Out(~k) ]


rule U_1_loop_start:
 let org_x = <m1, m2, '0'> //x has to stop with '0'
 in
 [] --[Start($U, $W)]-> [ !U_1_Loop(org_x), !State($U, $W, org_x)]

rule U_1_loop:
 let x = <hd, tl>
     e = hash(x)		  
     sig = sign(e, ~k )
 in
 [	 !Priv_k(U, ~k) 
 , 	 !U_1_Loop(x)
 ,	 !State(U, W, org_x)
 ]
 --[ Neq(hd, '0'),
 	 U_1_St(U, e)
 ]->[
 	 Out( <e, sig>)	
 ,   U_1_Send(U, W, hd, e)/	 //instead of a one global state I found this pieced states to be more informative..
 ,	 !U_1_Loop(tl)
 ]	

rule W:
 let e = h(<r, ph>)
 	 v = verify(sig, e, pkU)
     sig2 = sign(e, kW)	
 in 									
 [	 !State(U, W, org_x), Pub_k(U, pkU), !Priv_k(W, kW)
 ,   In(<e, sig>)	
 ]
 --[ Eq(v,true), W_Rcv(W, e)		
 ]->
 [   Out(<e, sig2>)
 ]

 //U-2 user receive
rule U_2:
 let e = h(<r, ph>)
 	 v = verify(sig, e, pkW)
 in
 [
 	 !Pub_k(W, pkW), !State(U, W, org_x), U_1_Send(U, W, r, e)				
 ,   In(<e, sig>)
 ]
 --[ Eq(v, true)
 ,	 Accept(U, W, e)		//ACCEPT under these circumstances
 ]->
 [	Accepted(U, W, r, e) ]	


rule retrieved_all:
	let e = hash(r, x)
	in
[
	 Accepted(U, W, r, e), !State(U, W, x) 
]--[ All_Retrieved(U, W, e) //ALL messages retrieved
]->[]

restriction no_delivery_without_W :
  "(All U W e #i. Accept(U, W, e) @ i ==> Ex #j. U_1_St(U, e) @ j )
  ==>
   (All #k. W_Rcv(W, e)@k ==> j<k & k<i)"

lemma start_before_U_send [reuse]:
	"All U e #i. U_1_St(U, e)@i ==> (Ex W #j. Start(U, W)@j & j < i)"

lemma start_before_accept [reuse]:
	"All U W e #i. All_Retrieved(U, W, e)@i ==> (Ex #j. Start(U, W)@j & j < i)"

lemma U_send_before_W_rcv :
	"All W e #i. W_Rcv(W, e)@i ==> (Ex U #j. U_1_St(U, e)@j & j < i)"	

lemma W_rcv_before_accept :
	"All U W e #i. Accept(U, W, e)@i ==> (Ex #j. W_Rcv(W, e)@j & j < i)"

lemma all_retrieved :
	"All U W e #i. All_Retrieved(U, W, e)@i ==> (Ex #j. Accept(U, W, e)@j & j<i )"	


end